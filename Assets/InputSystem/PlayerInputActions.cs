//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMovementBase"",
            ""id"": ""92a90ef5-a9d7-4acf-aa10-7daf74dbce43"",
            ""actions"": [
                {
                    ""name"": ""MoveDirection"",
                    ""type"": ""Value"",
                    ""id"": ""6876ef63-7445-407a-adbb-bf4bd353a325"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookDirection"",
                    ""type"": ""Value"",
                    ""id"": ""8b51f85f-04ce-49a5-bb05-114a9317c042"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchPlacingMode"",
                    ""type"": ""Button"",
                    ""id"": ""a9727a04-dfec-4671-8e42-dfb6c17dbfe5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b381140c-2568-409e-99c1-2e2d3bee6874"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be278524-ccc6-4b18-b329-9dff1b7e9ad5"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LookDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""431aea7e-9055-4e83-af81-735fc95dd5c8"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwitchPlacingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerShooting"",
            ""id"": ""79168ebc-3400-4bab-a6ee-0f07183a462f"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""0204fae6-cea8-4a4a-8c20-0d8ba3f7322a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""97b84c20-9c20-49be-aaa8-0394ea2f8c2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f7fedfd-735c-4623-a46c-64d1d8107d1f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a551e504-bfff-4f62-aa74-8e323c06c067"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NextWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerPlacing"",
            ""id"": ""1b3756a4-eb21-4347-bb1d-d901a43a79d5"",
            ""actions"": [
                {
                    ""name"": ""Build"",
                    ""type"": ""Button"",
                    ""id"": ""b8c48b3e-394f-4020-8460-d5082c9f5702"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4247ec7-8c93-4a39-867d-1f835a11207b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Build"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMovementBase
        m_PlayerMovementBase = asset.FindActionMap("PlayerMovementBase", throwIfNotFound: true);
        m_PlayerMovementBase_MoveDirection = m_PlayerMovementBase.FindAction("MoveDirection", throwIfNotFound: true);
        m_PlayerMovementBase_LookDirection = m_PlayerMovementBase.FindAction("LookDirection", throwIfNotFound: true);
        m_PlayerMovementBase_SwitchPlacingMode = m_PlayerMovementBase.FindAction("SwitchPlacingMode", throwIfNotFound: true);
        // PlayerShooting
        m_PlayerShooting = asset.FindActionMap("PlayerShooting", throwIfNotFound: true);
        m_PlayerShooting_Shoot = m_PlayerShooting.FindAction("Shoot", throwIfNotFound: true);
        m_PlayerShooting_NextWeapon = m_PlayerShooting.FindAction("NextWeapon", throwIfNotFound: true);
        // PlayerPlacing
        m_PlayerPlacing = asset.FindActionMap("PlayerPlacing", throwIfNotFound: true);
        m_PlayerPlacing_Build = m_PlayerPlacing.FindAction("Build", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovementBase
    private readonly InputActionMap m_PlayerMovementBase;
    private List<IPlayerMovementBaseActions> m_PlayerMovementBaseActionsCallbackInterfaces = new List<IPlayerMovementBaseActions>();
    private readonly InputAction m_PlayerMovementBase_MoveDirection;
    private readonly InputAction m_PlayerMovementBase_LookDirection;
    private readonly InputAction m_PlayerMovementBase_SwitchPlacingMode;
    public struct PlayerMovementBaseActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerMovementBaseActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDirection => m_Wrapper.m_PlayerMovementBase_MoveDirection;
        public InputAction @LookDirection => m_Wrapper.m_PlayerMovementBase_LookDirection;
        public InputAction @SwitchPlacingMode => m_Wrapper.m_PlayerMovementBase_SwitchPlacingMode;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovementBase; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementBaseActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementBaseActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementBaseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementBaseActionsCallbackInterfaces.Add(instance);
            @MoveDirection.started += instance.OnMoveDirection;
            @MoveDirection.performed += instance.OnMoveDirection;
            @MoveDirection.canceled += instance.OnMoveDirection;
            @LookDirection.started += instance.OnLookDirection;
            @LookDirection.performed += instance.OnLookDirection;
            @LookDirection.canceled += instance.OnLookDirection;
            @SwitchPlacingMode.started += instance.OnSwitchPlacingMode;
            @SwitchPlacingMode.performed += instance.OnSwitchPlacingMode;
            @SwitchPlacingMode.canceled += instance.OnSwitchPlacingMode;
        }

        private void UnregisterCallbacks(IPlayerMovementBaseActions instance)
        {
            @MoveDirection.started -= instance.OnMoveDirection;
            @MoveDirection.performed -= instance.OnMoveDirection;
            @MoveDirection.canceled -= instance.OnMoveDirection;
            @LookDirection.started -= instance.OnLookDirection;
            @LookDirection.performed -= instance.OnLookDirection;
            @LookDirection.canceled -= instance.OnLookDirection;
            @SwitchPlacingMode.started -= instance.OnSwitchPlacingMode;
            @SwitchPlacingMode.performed -= instance.OnSwitchPlacingMode;
            @SwitchPlacingMode.canceled -= instance.OnSwitchPlacingMode;
        }

        public void RemoveCallbacks(IPlayerMovementBaseActions instance)
        {
            if (m_Wrapper.m_PlayerMovementBaseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementBaseActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementBaseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementBaseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementBaseActions @PlayerMovementBase => new PlayerMovementBaseActions(this);

    // PlayerShooting
    private readonly InputActionMap m_PlayerShooting;
    private List<IPlayerShootingActions> m_PlayerShootingActionsCallbackInterfaces = new List<IPlayerShootingActions>();
    private readonly InputAction m_PlayerShooting_Shoot;
    private readonly InputAction m_PlayerShooting_NextWeapon;
    public struct PlayerShootingActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerShootingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_PlayerShooting_Shoot;
        public InputAction @NextWeapon => m_Wrapper.m_PlayerShooting_NextWeapon;
        public InputActionMap Get() { return m_Wrapper.m_PlayerShooting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerShootingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerShootingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerShootingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerShootingActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @NextWeapon.started += instance.OnNextWeapon;
            @NextWeapon.performed += instance.OnNextWeapon;
            @NextWeapon.canceled += instance.OnNextWeapon;
        }

        private void UnregisterCallbacks(IPlayerShootingActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @NextWeapon.started -= instance.OnNextWeapon;
            @NextWeapon.performed -= instance.OnNextWeapon;
            @NextWeapon.canceled -= instance.OnNextWeapon;
        }

        public void RemoveCallbacks(IPlayerShootingActions instance)
        {
            if (m_Wrapper.m_PlayerShootingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerShootingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerShootingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerShootingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerShootingActions @PlayerShooting => new PlayerShootingActions(this);

    // PlayerPlacing
    private readonly InputActionMap m_PlayerPlacing;
    private List<IPlayerPlacingActions> m_PlayerPlacingActionsCallbackInterfaces = new List<IPlayerPlacingActions>();
    private readonly InputAction m_PlayerPlacing_Build;
    public struct PlayerPlacingActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerPlacingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Build => m_Wrapper.m_PlayerPlacing_Build;
        public InputActionMap Get() { return m_Wrapper.m_PlayerPlacing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerPlacingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerPlacingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerPlacingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerPlacingActionsCallbackInterfaces.Add(instance);
            @Build.started += instance.OnBuild;
            @Build.performed += instance.OnBuild;
            @Build.canceled += instance.OnBuild;
        }

        private void UnregisterCallbacks(IPlayerPlacingActions instance)
        {
            @Build.started -= instance.OnBuild;
            @Build.performed -= instance.OnBuild;
            @Build.canceled -= instance.OnBuild;
        }

        public void RemoveCallbacks(IPlayerPlacingActions instance)
        {
            if (m_Wrapper.m_PlayerPlacingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerPlacingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerPlacingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerPlacingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerPlacingActions @PlayerPlacing => new PlayerPlacingActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerMovementBaseActions
    {
        void OnMoveDirection(InputAction.CallbackContext context);
        void OnLookDirection(InputAction.CallbackContext context);
        void OnSwitchPlacingMode(InputAction.CallbackContext context);
    }
    public interface IPlayerShootingActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnNextWeapon(InputAction.CallbackContext context);
    }
    public interface IPlayerPlacingActions
    {
        void OnBuild(InputAction.CallbackContext context);
    }
}
